class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """

        stack = []
        bracket_map = {')': '(', '}': '{', ']': '['}

        for char in s:
            if char in bracket_map:
                # If it's a closing bracket (cannot match)
                if not stack or stack.pop() != bracket_map[char]:  # Check for match
                # check if the stack is empty using "if not stack".
                    return False
            else:
                stack.append(char) # Push opening brackets onto the stack
        return len(stack) == 0  # If stack is empty, it's valid


solution = Solution()
print(solution.isValid("()"))
