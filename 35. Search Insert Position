class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """

        # Binary Search Tree!!
        left, right = 0, len(nums) - 1
        
        while left <= right:   # to use while loop iterate untill finding false value
            mid = int((left + right) / 2)  # to ensure that mid is integer (// means floor division)
            # or using "mid = (left + right) // 2" is better, but I was kinda confused ;(
            # The // operator is specifically designed for floor division and directly gives you the integer result.)
            if nums[mid] == target:     # see nums[mid] as num[i] = index
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1  # to move backward untill find the correct index to insert the target by insert with "left = mid + 1"
                
        return left  # The correct insertion index


nums = [1,3,5,6]
target = 5
solution = Solution()
print(solution.searchInsert(nums, target))
        
